service: notes-api-v3 # Name of your serverless service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1

functions:
  authorizer:
    handler: authorizer.handler

  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref NotesTable # Get the physical name of the table resource, format: NotesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # Enable connection reuse for AWS SDK for JavaScript
    iamRoleStatements: # IAM role statements for the Lambda function
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt NotesTable.Arn # Get the ARN of the table resource, format: arn:aws:dynamodb:us-east-1:123456789012:table/NotesTable
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer # Use the authorizer function

  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref NotesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt NotesTable.Arn
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer # Use the authorizer function

  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref NotesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt NotesTable.Arn
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer # Use the authorizer function

  getNote:
    handler: handler.getNote
    environment:
      NOTES_TABLE_NAME: !Ref NotesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt NotesTable.Arn
    events:
      - http:
          method: get
          path: notes/{id}
          authorizer: authorizer # Use the authorizer function

  getAllNote:
    handler: handler.getAllNote
    environment:
      NOTES_TABLE_NAME: !Ref NotesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt NotesTable.Arn
    events:
      - http:
          method: get
          path: notes/
          authorizer: authorizer # Use the authorizer function

plugins:
  - serverless-iam-roles-per-function

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table # Resource type
      Properties:
        TableName: notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions: # Required list of attribute definitions
          - AttributeName: notesId # Required attribute name for the tableâ€™s primary key
            AttributeType: S # (S | N | B) for string, number, binary
        KeySchema: # Required list of hash and range attributes
          - AttributeName: notesId
            KeyType: HASH
